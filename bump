#!/usr/bin/env python3
from argparse import ArgumentParser
from pathlib import Path
import re
import subprocess


def get_latest_build_number(version: str, tags: list[str]) -> int:
    latest_tag_number = 0
    for tag in tags:
        match = re.match(rf"^v{version}-(\d+)$", tag)
        if match:
            number = int(match.group(1))
            if number > latest_tag_number:
                latest_tag_number = number

    return latest_tag_number


def bump_version(version: str | None = None) -> None:
    action_path = Path(__file__).parent / "action.yml"

    with action_path.open() as f:
        action_content = f.read()
    match = re.search(r"VERSION_TAG: v([\d.]+)", action_content)
    if match is None:
        print("action.yml is malformed.")
        return
    action_version = match[1]
    if action_version == version:
        print("The old version is the same as the new version!")
        return

    old_tags = subprocess.run(
        ["git", "tag"], stdout=subprocess.PIPE, encoding="utf-8"
    ).stdout.splitlines()
    if version is None:
        build_number = get_latest_build_number(action_version, old_tags) + 1
        tag_name = f"v{version}-{build_number}"
    else:
        tag_name = f"v{version}-1"
    with action_path.open("w") as f:
        f.write(re.sub("VERSION_TAG: .+", f"VERSION_TAG: {tag_name}", action_content))
    subprocess.run(
        ["git", "commit", "-a", "--allow-empty", "-m", f"release {tag_name}"]
    )
    if tag_name in old_tags:
        subprocess.run(["git", "tag", "-d", tag_name])
    subprocess.run(["git", "tag", tag_name, "-m", tag_name])

    if input("Push [Y/n]") in ["y", "Y", ""]:
        subprocess.run(["git", "push", "--follow-tags"])


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("version", default=None, nargs="?")
    args = parser.parse_args()
    bump_version(args.version)
